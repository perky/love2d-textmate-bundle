d = 'display'
t = 'tool_tip'
i = 'insert'
@choices = [
       {d => 'love.'},
	   
		{d => 'love.load', t => 'called when the game first loads. ... = command-line data', i => '(...)'},
        {d => 'love.run', t => 'contains the main loop by default', i => '()'},
        {d => 'love.update', t => 'called every frame.<br><strong>dt</strong>:number = time since last frame', i => '( dt )'},
        {d => 'love.draw', t => 'called every frame to draw objects', i => '()'},
        {d => 'love.keypressed', t => 'called when a key is pressed.<br><strong>key</strong>:KeyConstant = character of the key pressed<br><strong>unicode</strong>:number = the unicode of the key pressed.', i => '( key, unicode )'},
        {d => 'love.keyreleased', t => 'called when a key is released.<br><strong>key</strong>:KeyConstant = character of the key pressed<br><strong>unicode</strong>:number = the unicode of the key pressed.', i => '( key, unicode )'},
        {d => 'love.mousepressed', t => 'called when any mouse button is pressed.<br><strong>x</strong>:number = mouse x position<br><strong>y</strong>:number = mouse y position<br><strong>button</strong>:MouseConstant = button pressed on mouse, r = right', i => '( x, y, button )'},
        {d => 'love.mousereleased', t => 'called when any mouse button is released.<br><strong>x</strong>:number = mouse x position<br><strong>y</strong>:number = mouse y position<br><strong>button</strong>:MouseConstant = button released on mouse, r = right', i => '( x, y, button )'},
        {d => 'love.joystickpressed', t => 'Called when a joystick button is pressed.<br>joystick:number = the joystick number, button:number = the button number', i => '( joystick, button )'},
        {d => 'love.joystickpressed', t => 'Called when a joystick button is pressed.<br>joystick:number = the joystick number, button:number = the button number', i => '( joystick, button )'},
       
       {d => 'love.audio.getNumSources', t => 'Gets the current number of simulatenous playing sources.', i => '( )'},
       {d => 'love.audio.getOrientation', t => 'Returns the orientation of the listener.', i => '( )'},
       {d => 'love.audio.getPosition', t => 'Returns the position of the listener.', i => '( )'},
       {d => 'love.audio.getVelocity', t => 'Returns the velocity of the listener.', i => '( )'},
       {d => 'love.audio.getVolume', t => 'Returns the master volume.', i => '( )'},
       {d => 'love.audio.newSource', t => 'Creates a new Source from a file. Sources created from SoundData are always static.<br><strong>file</strong>:string = The file to create a source from<br><strong>type</strong>:SourceType = Streaming or static source', i => '( ${1:file}, ${2:type} )'},
       {d => 'love.audio.pause', t => 'Pauses playback on the specified source or pauses all audio if argument nil.<br><strong>source</strong>:Source = The source on which you can pause playback. (optional)', i => '( ${1:source} )'},
       {d => 'love.audio.play', t => 'Plays the specified source.<br><strong>source</strong>:Source = The source to play.', i => '( ${1:source} )'},
       {d => 'love.audio.rewind', t => 'Rewinds source <em>or</em> all audio.<br><strong>source</strong>:Source = The sound to reqind. (optional)', i => '( ${1:source} )'},
       {d => 'love.audio.setOrientation', t => 'Sets the orientation of the listner.<br><strong>v</strong>:array = A float array of size 6 containing [x,y,z] for the forward vector, followed by [x,y,z] for the up vector.', i => '( ${1:v} )'},
       {d => 'love.audio.setPosition', t => 'Sets the position of the listener.<br><strong>v</strong>:array = A float array of size 3 containing [x,y,z] in that order', i => '( ${1:v} )'},
       {d => 'love.audio.setVelocity', t => 'Sets the velocity of the listener.<br><strong>x</strong>:number = The X velocity of the listner<br><strong>y</strong>:number = The Y velocity of the listener<br><strong>z</strong>:number = The Z velocity of the listener.', i => '( ${1:x}, ${2:y}, ${3:z} )'},
       {d => 'love.audio.setVolume', t => 'Sets the master volume.<br><strong>volume</strong>:number = 1.0 is max and 0.0 is off', i => '( ${1:volume} )'},
       {d => 'love.audio.stop', t => 'Stops playing the source <em>or<em> all audio.<br><strong>source</strong>:Source = The source to stop', i => '( ${1:source} )'},
       
       {d => 'love.event.poll', t => 'Gets an iterator for messages in the event queue.', i => '( )'},
       {d => 'love.event.push', t => 'Adds an event to the event queue.', i => '( ${1:e}, ${2:a}, ${3:b}, ${4:c} )'},
       {d => 'love.event.wait', t => 'Like love.event.poll, but blocks until there is an event in the queue.<br><u>returns</u> e, a, b, c', i => '(  )'},
       
       {d => 'love.filesystem.enumerate', t => 'Return all the files and subdirectories in the directory.<br><strong>dir</strong>:string = The directory<br><u>returns</u> files:table the files/subdirectories in the directory.', i => '( dir )'},
       {d => 'love.filesystem.exists', t => 'Check whether a file or directory exists.<br><strong>filename</strong>:string the file or directory to check', i => '( filename )'},
       {d => 'love.filesystem.getAppdataDirectory', t => 'Returns the application data directory (could be the same as getUserDirectory)', i => '( )'},
       {d => 'love.filesystem.getSaveDirectory', t => '', i => '(  )'},
       {d => 'love.filesystem.getUserDirectory', t => '', i => '(  )'},
       {d => 'love.filesystem.getWorkingDirectory', t => '', i => '(  )'},
       {d => 'love.filesystem.init', t => '', i => '(  )'},
       {d => 'love.filesystem.isDirectory', t => '', i => '(  )'},
       {d => 'love.filesystem.isFile', t => '', i => '(  )'},
       {d => 'love.filesystem.lines', t => '', i => '(  )'},
       {d => 'love.filesystem.load', t => '', i => '(  )'},
       {d => 'love.filesystem.mkdir', t => '', i => '(  )'},
       {d => 'love.filesystem.newFile', t => '', i => '(  )'},
       {d => 'love.filesystem.read', t => '', i => '(  )'},
       {d => 'love.filesystem.remove', t => '', i => '(  )'},
       {d => 'love.filesystem.setIdentity', t => '', i => '(  )'},
       {d => 'love.filesystem.setSource', t => '', i => '(  )'},
       {d => 'love.filesystem.write', t => '', i => '(  )'},
       
       {d => 'love.graphics.checkMode', t => '', i => '(  )'},
       {d => 'love.graphics.circle', t => '', i => '(  )'},
       {d => 'love.graphics.draw', t => '', i => '(  )'},
       {d => 'love.graphics.drawq', t => '', i => '(  )'},
       {d => 'love.graphics.getBackgroundColor', t => '', i => '(  )'},
       {d => 'love.graphics.getBlendMode', t => '', i => '(  )'},
       {d => 'love.graphics.getColor', t => '', i => '(  )'},
       {d => 'love.graphics.getColorMode', t => '', i => '(  )'},
       {d => 'love.graphics.getFont', t => '', i => '(  )'},
       {d => 'love.graphics.getHeight', t => '', i => '(  )'},
       {d => 'love.graphics.getLineStipple', t => '', i => '(  )'},
       {d => 'love.graphics.getLineWidth', t => '', i => '(  )'},
       {d => 'love.graphics.getMaxPointSize', t => '', i => '(  )'},
       {d => 'love.graphics.getModes', t => '', i => '(  )'},
       {d => 'love.graphics.getPointStyle', t => '', i => '(  )'},
       {d => 'love.graphics.getScissor', t => '', i => '(  )'},
       {d => 'love.graphics.getWidth', t => '', i => '(  )'},
       {d => 'love.graphics.isCreated', t => '', i => '(  )'},
       {d => 'love.graphics.line', t => '', i => '(  )'},
       {d => 'love.graphics.newFont', t => '', i => '(  )'},
       {d => 'love.graphics.newImage', t => '', i => '(  )'},
       {d => 'love.graphics.newImageFont', t => '', i => '(  )'},
       {d => 'love.graphics.newQuad', t => '', i => '(  )'},
       {d => 'love.graphics.newScreenshot', t => '', i => '(  )'},
       {d => 'love.graphics.newSpriteBatch', t => '', i => '(  )'},
       {d => 'love.graphics.point', t => '', i => '(  )'},
       {d => 'love.graphics.polygon', t => '', i => '(  )'},
       {d => 'love.graphics.print', t => '', i => '(  )'},
       {d => 'love.graphics.printf', t => '', i => '(  )'},
       {d => 'love.graphics.rectangle', t => '', i => '(  )'},
       {d => 'love.graphics.setBackgroundColor', t => '', i => '(  )'},
       {d => 'love.graphics.setBlendMode', t => '', i => '(  )'},
       {d => 'love.graphics.setCaption', t => '', i => '(  )'},
       {d => 'love.graphics.setColor', t => '', i => '(  )'},
       {d => 'love.graphics.setColorMode', t => '', i => '(  )'},
       {d => 'love.graphics.setFont', t => '', i => '(  )'},
       {d => 'love.graphics.setLine', t => '', i => '(  )'},
       {d => 'love.graphics.setLineStipple', t => '', i => '(  )'},
       {d => 'love.graphics.setLineStyle', t => '', i => '(  )'},
       {d => 'love.graphics.setLineWidth', t => '', i => '(  )'},
       {d => 'love.graphics.setMode', t => '', i => '(  )'},
       {d => 'love.graphics.setScissor', t => '', i => '(  )'},
       {d => 'love.graphics.toggleFullscreen', t => '', i => '(  )'},
       {d => 'love.graphics.triangle', t => '', i => '(  )'},
       
       {d => 'love.image.newEncodedImageData', t => '', i => '(  )'},
       {d => 'love.image.newImageData', t => '', i => '(  )'},
       
       {d => 'love.keyboard.getKeyRepeat', t => '', i => '(  )'},
       {d => 'love.keyboard.isDown', t => '', i => '(  )'},
       {d => 'love.keyboard.setKeyRepeat', t => '', i => '(  )'},
       
       {d => 'love.mouse.getPosition', t => '', i => '(  )'},
       {d => 'love.mouse.getX', t => '', i => '(  )'},
       {d => 'love.mouse.getY', t => '', i => '(  )'},
       {d => 'love.mouse.isDown', t => '', i => '(  )'},
       {d => 'love.mouse.isGrabbed', t => '', i => '(  )'},
       {d => 'love.mouse.isVisible', t => '', i => '(  )'},
       {d => 'love.mouse.setGrab', t => '', i => '(  )'},
       {d => 'love.mouse.setPosition', t => '', i => '(  )'},
       {d => 'love.mouse.setVisible', t => '', i => '(  )'},
       
       {d => 'love.physics.newBody', t => '', i => '(  )'},
       {d => 'love.physics.newCircleShape', t => '', i => '(  )'},
       {d => 'love.physics.newMouseJoint', t => '', i => '(  )'},
       {d => 'love.physics.newPolygonShape', t => '', i => '(  )'},
       {d => 'love.physics.newRectangleShape', t => '', i => '(  )'},
       {d => 'love.physics.newRevoluteJoint', t => '', i => '(  )'},
       {d => 'love.physics.newWorld', t => '', i => '(  )'},
       
       {d => 'love.sound.newDecoder', t => '', i => '(  )'},
       {d => 'love.sound.newSoundData', t => '', i => '(  )'},
       
       {d => 'love.timer.getDelta', t => '', i => '(  )'},
       {d => 'love.timer.getFPS', t => '', i => '(  )'},
       {d => 'love.timer.getMicroTime', t => '', i => '(  )'},
       {d => 'love.timer.getTime', t => '', i => '(  )'},
       {d => 'love.timer.sleep', t => '', i => '(  )'},
       {d => 'love.timer.step', t => '', i => '(  )'},
	   
	   {d => 'love.audio.', t => 'provides an interface to create noise with the users speakers'},
       {d => 'love.event.', t => 'Manages events, like keypresses.'},
       {d => 'love.filesytem.', t => 'Provides an interface to the user\'s filesystem.'},
       {d => 'love.graphics.', t => 'The graphics module is responsible for things like Images, Animations, Fonts, etc.'},
       {d => 'love.image.', t => 'Provides an interface to decode encoded image data.'},
       {d => 'love.joystick.', t => 'Provides an interface to the user\'s joystick.'},
       {d => 'love.keyboard.', t => 'Provides an interface to the user\'s keyboard.'},
       {d => 'love.mouse.', t => 'Provides an interface to the user\'s mouse.'},
       {d => 'love.physics.', t => 'Simulates 2D rigid body physics in a realistic manner.'},
       {d => 'love.sound.', t => 'This module is responsible for decoding sound files.'},
       {d => 'love.timer.', t => 'Provides an interface to the user\'s clock.'},
       
       {d => 'love.func', t => '', i => '(  )'},
       {d => 'love.func', t => '', i => '(  )'}
]

