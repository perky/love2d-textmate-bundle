d = 'display'
t = 'tool_tip'
i = 'insert'
@choices = [
       {d => 'love.'},
	   
		{d => 'love.load', t => 'called when the game first loads. ... = command-line data', i => '(...)'},
        {d => 'love.run', t => 'contains the main loop by default', i => '()'},
        {d => 'love.update', t => 'called every frame.<br><strong>dt</strong>:number = time since last frame', i => '( dt )'},
        {d => 'love.draw', t => 'called every frame to draw objects', i => '()'},
        {d => 'love.keypressed', t => 'called when a key is pressed.<br><strong>key</strong>:KeyConstant = character of the key pressed<br><strong>unicode</strong>:number = the unicode of the key pressed.', i => '( key, unicode )'},
        {d => 'love.keyreleased', t => 'called when a key is released.<br><strong>key</strong>:KeyConstant = character of the key pressed<br><strong>unicode</strong>:number = the unicode of the key pressed.', i => '( key, unicode )'},
        {d => 'love.mousepressed', t => 'called when any mouse button is pressed.<br><strong>x</strong>:number = mouse x position<br><strong>y</strong>:number = mouse y position<br><strong>button</strong>:MouseConstant = button pressed on mouse, r = right', i => '( x, y, button )'},
        {d => 'love.mousereleased', t => 'called when any mouse button is released.<br><strong>x</strong>:number = mouse x position<br><strong>y</strong>:number = mouse y position<br><strong>button</strong>:MouseConstant = button released on mouse, r = right', i => '( x, y, button )'},
        {d => 'love.joystickpressed', t => 'Called when a joystick button is pressed.<br>joystick:number = the joystick number, button:number = the button number', i => '( joystick, button )'},
        {d => 'love.joystickpressed', t => 'Called when a joystick button is pressed.<br>joystick:number = the joystick number, button:number = the button number', i => '( joystick, button )'},
       
       {d => 'love.audio.getNumSources', t => 'Gets the current number of simulatenous playing sources.', i => '( )'},
       {d => 'love.audio.getOrientation', t => 'Returns the orientation of the listener.', i => '( )'},
       {d => 'love.audio.getPosition', t => 'Returns the position of the listener.', i => '( )'},
       {d => 'love.audio.getVelocity', t => 'Returns the velocity of the listener.', i => '( )'},
       {d => 'love.audio.getVolume', t => 'Returns the master volume.', i => '( )'},
       {d => 'love.audio.newSource', t => 'Creates a new Source from a file. Sources created from SoundData are always static.<br><strong>file</strong>:string = The file to create a source from<br><strong>type</strong>:SourceType = Streaming or static source', i => '( ${1:file}, ${2:type} )'},
       {d => 'love.audio.pause', t => 'Pauses playback on the specified source or pauses all audio if argument nil.<br><strong>source</strong>:Source = The source on which you can pause playback. (optional)', i => '( ${1:source} )'},
       {d => 'love.audio.play', t => 'Plays the specified source.<br><strong>source</strong>:Source = The source to play.', i => '( ${1:source} )'},
       {d => 'love.audio.rewind', t => 'Rewinds source <em>or</em> all audio.<br><strong>source</strong>:Source = The sound to reqind. (optional)', i => '( ${1:source} )'},
       {d => 'love.audio.setOrientation', t => 'Sets the orientation of the listner.<br><strong>v</strong>:array = A float array of size 6 containing [x,y,z] for the forward vector, followed by [x,y,z] for the up vector.', i => '( ${1:v} )'},
       {d => 'love.audio.setPosition', t => 'Sets the position of the listener.<br><strong>v</strong>:array = A float array of size 3 containing [x,y,z] in that order', i => '( ${1:v} )'},
       {d => 'love.audio.setVelocity', t => 'Sets the velocity of the listener.<br><strong>x</strong>:number = The X velocity of the listner<br><strong>y</strong>:number = The Y velocity of the listener<br><strong>z</strong>:number = The Z velocity of the listener.', i => '( ${1:x}, ${2:y}, ${3:z} )'},
       {d => 'love.audio.setVolume', t => 'Sets the master volume.<br><strong>volume</strong>:number = 1.0 is max and 0.0 is off', i => '( ${1:volume} )'},
       {d => 'love.audio.stop', t => 'Stops playing the source <em>or<em> all audio.<br><strong>source</strong>:Source = The source to stop', i => '( ${1:source} )'},
       
       {d => 'love.event.poll', t => 'Gets an iterator for messages in the event queue.', i => '( )'},
       {d => 'love.event.push', t => 'Adds an event to the event queue.', i => '( ${1:e}, ${2:a}, ${3:b}, ${4:c} )'},
       {d => 'love.event.wait', t => 'Like love.event.poll, but blocks until there is an event in the queue.<br><u>returns</u> e, a, b, c', i => '(  )'},
       
       {d => 'love.filesystem.enumerate', t => 'Return all the files and subdirectories in the directory.<br><strong>dir</strong>:string = The directory<br><u>returns</u> files:table the files/subdirectories in the directory.', i => '( dir )'},
       {d => 'love.filesystem.exists', t => 'Check whether a file or directory exists.<br><strong>filename</strong>:string the file or directory to check', i => '( filename )'},
       {d => 'love.filesystem.getAppdataDirectory', t => 'Returns the application data directory (could be the same as getUserDirectory)', i => '( )'},
       {d => 'love.filesystem.getSaveDirectory', t => '', i => '(  )'},
       {d => 'love.filesystem.getUserDirectory', t => '', i => '(  )'},
       {d => 'love.filesystem.getWorkingDirectory', t => '', i => '(  )'},
       {d => 'love.filesystem.init', t => '', i => '(  )'},
       {d => 'love.filesystem.isDirectory', t => 'Check whether something is a directory.<br><strong>filename</strong>:string The path to a potential directory.<br><u>Returns</u> is_dir:boolean => True if there is a directory with the specified name. False otherwise.', i => '( $1filename )'},
       {d => 'love.filesystem.isFile', t => 'Check whether something is a file.<br><strong>filename</strong>:string The path to a potential file.<br><u>Returns</u> is_file:boolean => True if there is a file with the specified name. False otherwise.', i => '( file )'},
       {d => 'love.filesystem.lines', t => 'Iterate over the lines in a file.<br><strong>name</strong>:string The name (and path) of the file.<br><u>Returns</u> iterator:function => A function that iterates over all the lines in the file.', i => '( name )'},
       {d => 'love.filesystem.load', t => 'Load a file (but not run it).<br><strong>name</strong>:string The name (and path) of the file.<br><u>Returns</u> chunk:function => The loaded chunk.', i => '( name )'},
       {d => 'love.filesystem.mkdir', t => 'Creates a directory.<br><strong>name</strong>:string The directory to create<br><u>Returns</u> True if the directory was created, false if not.', i => '( name )'},
       {d => 'love.filesystem.newFile', t => 'Creates a new File object. An error will occur if the specified file does not exist.<br><strong>filename</strong>:string The filename fo the file to read.<br><u>Returns</u> file:File => The new File object.', i => '( filename )'},
       {d => 'love.filesystem.read', t => 'Read the contents of a file.<br><strong>name</strong>:string The name (and path) of the file.<br><strong>size</strong>:number=all How many bytes to read.<br><u>Returns</u> contents:string => The file contents.<br><u>Returns</u> size:number => How many bytes have been read.', i => '( name, size )'},
       {d => 'love.filesystem.remove', t => 'Removes a file (or directory).<br><strong>name</strong>:string The file or directory to remove.<br><u>Returns</u> ok:boolean => True if the file or directory was removed, false otherwise.', i => '( name )'},
       {d => 'love.filesystem.setIdentity', t => 'Sets the write directory for your game. Note that you can only set the name <br>of the folder to store your files in, not the location.<br><strong>name</strong>:string The new identitiy that will be used as write directory.<br><u>Returns</u> nothing.', i => '( name )'},
       {d => 'love.filesystem.setSource', t => '', i => '()'},
       {d => 'love.filesystem.write', t => 'Writes data to a file.<br><strong>name</strong>:string The name (and path) of a file.<br><strong>data</strong>:string The data that should be written to the file.<br><strong>size</strong>:number=all how many bytes to write.<br><u>Returns</u> success:boolean => If the operation was successful.', i => '( ${1:name,} ${2:data,} ${3:size} )'},
  
       {d => 'love.graphics.checkMode', t => 'Checks if a display mode is supported.<br><strong>width</strong>:number The display width.<br><strong>height</strong>:number The display height.<br><strong>fullscreen</strong>:boolean True to check for fullscreen, false for windowed.<br><u>Returns</u> supported:boolean => True if supported, false if not.', i => '( ${1:width,} ${2:height,} ${3:fullscreen} )'},
       {d => 'love.graphics.circle', t => 'Draws a circle.<br><strong>mode</strong>:DrawMode How to draw a circle.<br><strong>x</strong>:number Postion of the center along the x axis.<br><strong>y</strong>:number Position of the center along the y axis.<br><strong>radius</strong>:number Radius of the circle.<br><strong>segments</strong>:number=8 The number of segments used for drawing the circle.', i => '( ${1:mode}, ${2:x}, ${3:y}, ${4:radius}, ${5:segments} )'},
       {d => 'love.graphics.draw', t => 'Draws an object.<br><strong>drawable</strong>:Drawable A drawable object.<br><strong>x</strong>:number The position to draw the object (x-axis).<br><strong>y</strong>:number The position to draw the object (y-axis).<br><strong>r</strong>:number=0 Orientation (radians).<br><strong>sx</strong>:number=1 Scale factor (x-axis).<br><strong>sy</strong>:number=sx Scale factor (y-axis).<br><strong>ox</strong>:number=0 Origin offset (x-axis).<br><strong>oy</strong>:number=0 Origin offset (y-axis).', i => '( ${1:drawable}, ${2:x}, ${3:y}${8:, ${4:sx}, ${5:sy}, ${6:ox}, ${7:oy}} )'},
       {d => 'love.graphics.drawq', t => 'Draw a Quad with the specified Image on screen.<br><strong>image</strong>:Image An image to texture the quad with.<br><strong>quad</strong>:Quad The quad to draw on screen.<br><strong>x</strong>:number The position to draw the object (x-axis).<br><strong>y</strong>:number The position to draw the object (y-axis).<br><strong>r</strong>:number=0 Orientation (radians).<br><strong>sx</strong>:number=1 Scale factor (x-axis).<br><strong>sy</strong>:number=sx Scale factor (y-axis).<br><strong>ox</strong>:number=0 Origin offset (x-axis).<br><strong>oy</strong>:number=0 Origin offset (y-axis).', i => '( ${1:image}, ${2:quad}, ${3:x}, ${4:y}${10:, ${5:r}, ${6:sx}, ${7:sy}, ${8:ox}, ${9:oy}} )'},
       {d => 'love.graphics.getBackgroundColor', t => 'Gets the current background color.<br><u>Returns</u> r,g,b:number => The red, green, blue color components (0-255)', i => '()'},
       {d => 'love.graphics.getBlendMode', t => 'Gets the blending mode.<br><u>Returns</u> mode:BlendMode => The current blend mode.', i => '()'},
       {d => 'love.graphics.getCaption', t => 'Gets the window caption.<br><u>Returns</u> caption:string => The current window caption', i => '()'},
       {d => 'love.graphics.getColor', t => 'Gets the current draw color.<br><u>Returns</u> r,g,b,a:number => The red, green, blue, alpha components (0-255)', i => '()'},
       {d => 'love.graphics.getColorMode', t => 'Gets the color mode.<br><u>Returns</u> mode:ColorMode => The current color mode.', i => '()'},
       {d => 'love.graphics.getFont', t => 'Gets the current Font object.<br><u>Returns</u> font:Font => The current Font, or nil if note is set', i => '()'},
       {d => 'love.graphics.getHeight', t => 'Gets the height of the window.<br><u>Returns</u> height:number => The height of the window', i => '())'},
       {d => 'love.graphics.getLineStipple', t => 'Gets the current line stipple.<br><u>Returns</u> pattern:number => The 16-bit stipple pattern.<br><u>Returns</u> repeat:number => The repeat factor.', i => '()'},
       {d => 'love.graphics.getLineWidth', t => 'Gets the current line width.<br><u>Returns</u> width:number => The current line width.', i => '()'},
       {d => 'love.graphics.getMaxPointSize', t => 'Gets the max supported point size.<br><u>Returns</u> size:number => The new point size.', i => '()'},
       {d => 'love.graphics.getModes', t => 'Gets a list of supported fullscreen modes.<br><u>Returns</u> modes:table => A table of width/height pairs', i => '()'},
       {d => 'love.graphics.getPointStyle', t => 'Gets the current point size.<br><u>Returns</u> style:PointStyle => The current point style.', i => '()'},
       {d => 'love.graphics.getScissor', t => 'Gets the current scissor box.<br><u>Returns</u> x,y:number => The x and y component of the top-left point.<br><u>Returns</u> width,height:number => The width and height of the box.', i => '()'},
       {d => 'love.graphics.getWidth', t => 'Gets the width of the window.<br><u>Returns</u> width:number => The current width of the window.', i => '()'},
       {d => 'love.graphics.isCreated', t => 'Checks if the display has been set.<br><u>Returns</u> true:boolean => True if the display has been set, false otherwise.', i => '()'},
       {d => 'love.graphics.line', t => 'Draws a line between two points.<br><strong>x1</strong>:number The position of first point on the x-axis.<br><strong>y1</strong>:number The position of first point on the y-axis.<br><strong>x2</strong>:number The position of second point on the x-axis.<br><strong>y2</strong>:number The position of second point on the y-axis.', i => '( ${1:x1}, ${2:y1}, ${3:x2}, ${4:y2} )'},
       {d => 'love.graphics.newFont', t => 'Creates a new Font.<br><strong>filename</strong>:size The filepath to the font file.<br><strong>size</strong>:number=12 The size of the font.<br><u>Returns</u> font:Font => A Font object which can be used to draw text.', i => '( ${1:filename}, ${2:size} )'},
       {d => 'love.graphics.newImage', t => '<em>OVERLOADED</em><br>Creates a new Image from a file path. Note that the x and y dimensions of the image must (currently) be a power of 2, or some graphics cards will not display it.<br><br><strong>filename</strong>:string The filepath to the image file.<br><br><strong>file</strong>:File A File pointing to an image.<br><br><strong>data</strong>:ImageData An ImageData object.<br><br><u>Returns</u> image:Image => An Image object which can be drawn on screen.', i => '( ${1:filename OR file OR data} )'},
       {d => 'love.graphics.newImageFont', t => '', i => '(  )'},
       {d => 'love.graphics.newQuad', t => '', i => '(  )'},
       {d => 'love.graphics.newScreenshot', t => '', i => '(  )'},
       {d => 'love.graphics.newSpriteBatch', t => '', i => '(  )'},
       {d => 'love.graphics.point', t => '', i => '(  )'},
       {d => 'love.graphics.polygon', t => '', i => '(  )'},
       {d => 'love.graphics.print', t => '', i => '(  )'},
       {d => 'love.graphics.printf', t => '', i => '(  )'},
       {d => 'love.graphics.rectangle', t => '', i => '(  )'},
       {d => 'love.graphics.setBackgroundColor', t => '', i => '(  )'},
       {d => 'love.graphics.setBlendMode', t => '', i => '(  )'},
       {d => 'love.graphics.setCaption', t => '', i => '(  )'},
       {d => 'love.graphics.setColor', t => '', i => '(  )'},
       {d => 'love.graphics.setColorMode', t => '', i => '(  )'},
       {d => 'love.graphics.setFont', t => '', i => '(  )'},
       {d => 'love.graphics.setLine', t => '', i => '(  )'},
       {d => 'love.graphics.setLineStipple', t => '', i => '(  )'},
       {d => 'love.graphics.setLineStyle', t => '', i => '(  )'},
       {d => 'love.graphics.setLineWidth', t => '', i => '(  )'},
       {d => 'love.graphics.setMode', t => '', i => '(  )'},
       {d => 'love.graphics.setScissor', t => '', i => '(  )'},
       {d => 'love.graphics.toggleFullscreen', t => '', i => '(  )'},
       {d => 'love.graphics.triangle', t => '', i => '(  )'},
       
       {d => 'love.image.newEncodedImageData', t => '', i => '(  )'},
       {d => 'love.image.newImageData', t => '', i => '(  )'},
       
       {d => 'love.keyboard.getKeyRepeat', t => '', i => '(  )'},
       {d => 'love.keyboard.isDown', t => '', i => '(  )'},
       {d => 'love.keyboard.setKeyRepeat', t => '', i => '(  )'},
       
       {d => 'love.mouse.getPosition', t => '', i => '(  )'},
       {d => 'love.mouse.getX', t => '', i => '(  )'},
       {d => 'love.mouse.getY', t => '', i => '(  )'},
       {d => 'love.mouse.isDown', t => '', i => '(  )'},
       {d => 'love.mouse.isGrabbed', t => '', i => '(  )'},
       {d => 'love.mouse.isVisible', t => '', i => '(  )'},
       {d => 'love.mouse.setGrab', t => '', i => '(  )'},
       {d => 'love.mouse.setPosition', t => '', i => '(  )'},
       {d => 'love.mouse.setVisible', t => '', i => '(  )'},
       
       {d => 'love.physics.newBody', t => '', i => '(  )'},
       {d => 'love.physics.newCircleShape', t => '', i => '(  )'},
       {d => 'love.physics.newMouseJoint', t => '', i => '(  )'},
       {d => 'love.physics.newPolygonShape', t => '', i => '(  )'},
       {d => 'love.physics.newRectangleShape', t => '', i => '(  )'},
       {d => 'love.physics.newRevoluteJoint', t => '', i => '(  )'},
       {d => 'love.physics.newWorld', t => '', i => '(  )'},
       
       {d => 'love.sound.newDecoder', t => '', i => '(  )'},
       {d => 'love.sound.newSoundData', t => '', i => '(  )'},
       
       {d => 'love.timer.getDelta', t => '', i => '(  )'},
       {d => 'love.timer.getFPS', t => '', i => '(  )'},
       {d => 'love.timer.getMicroTime', t => '', i => '(  )'},
       {d => 'love.timer.getTime', t => '', i => '(  )'},
       {d => 'love.timer.sleep', t => '', i => '(  )'},
       {d => 'love.timer.step', t => '', i => '(  )'},
	   
	   {d => 'love.audio.', t => 'provides an interface to create noise with the users speakers'},
       {d => 'love.event.', t => 'Manages events, like keypresses.'},
       {d => 'love.filesytem.', t => 'Provides an interface to the user\'s filesystem.'},
       {d => 'love.graphics.', t => 'The graphics module is responsible for things like Images, Animations, Fonts, etc.'},
       {d => 'love.image.', t => 'Provides an interface to decode encoded image data.'},
       {d => 'love.joystick.', t => 'Provides an interface to the user\'s joystick.'},
       {d => 'love.keyboard.', t => 'Provides an interface to the user\'s keyboard.'},
       {d => 'love.mouse.', t => 'Provides an interface to the user\'s mouse.'},
       {d => 'love.physics.', t => 'Simulates 2D rigid body physics in a realistic manner.'},
       {d => 'love.sound.', t => 'This module is responsible for decoding sound files.'},
       {d => 'love.timer.', t => 'Provides an interface to the user\'s clock.'},
       
       {d => 'love.func', t => '', i => '(  )'},
       {d => 'love.func', t => '', i => '(  )'}
]

